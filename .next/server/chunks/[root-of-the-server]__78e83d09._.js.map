{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/macuser/Documents/GitHub/Hackathon_GL_2025/app/api/patients/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { PrismaClient } from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Déstructurez les params directement dans les arguments de la fonction\n    const { id } = params\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"ID du patient manquant\" },\n        { status: 400 }\n      )\n    }\n\n    const patient = await prisma.patient.findUnique({\n      where: { id }\n    })\n\n    if (!patient) {\n      return NextResponse.json(\n        { error: \"Patient non trouvé\" },\n        { status: 404 }\n      )\n    }\n\n    return NextResponse.json(patient)\n    \n  } catch (error) {\n    console.error(\"Erreur récupération patient:\", error)\n    return NextResponse.json(\n      { error: \"Erreur serveur\" },\n      { status: 500 }\n    )\n  }\n}\n\n// Les corrections similaires pour PUT et DELETE\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const { id } = params // Déstructuration directe\n    const data = await request.json()\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"ID du patient manquant\" },\n        { status: 400 }\n      )\n    }\n\n    const updatedPatient = await prisma.patient.update({\n      where: { id },\n      data: {\n        ...data,\n        age: data.age ? parseInt(data.age) : undefined,\n        poids: data.poids ? parseFloat(data.poids) : undefined,\n        taille: data.taille ? parseFloat(data.taille) : undefined\n      }\n    })\n\n    return NextResponse.json(updatedPatient)\n    \n  } catch (error) {\n    console.error(\"Erreur mise à jour patient:\", error)\n    return NextResponse.json(\n      { error: \"Erreur serveur\" },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const { id } = params // Déstructuration directe\n\n    if (!id) {\n      return NextResponse.json(\n        { error: \"ID du patient manquant\" },\n        { status: 400 }\n      )\n    }\n\n    await prisma.patient.delete({\n      where: { id }\n    })\n\n    return new NextResponse(null, { status: 204 })\n    \n  } catch (error) {\n    console.error(\"Erreur suppression patient:\", error)\n    return NextResponse.json(\n      { error: \"Erreur serveur\" },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,wEAAwE;QACxE,MAAM,EAAE,EAAE,EAAE,GAAG;QAEf,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,MAAM,OAAO,OAAO,CAAC,UAAU,CAAC;YAC9C,OAAO;gBAAE;YAAG;QACd;QAEA,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiB,GAC1B;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,OAAO,0BAA0B;;QAChD,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,iBAAiB,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YACjD,OAAO;gBAAE;YAAG;YACZ,MAAM;gBACJ,GAAG,IAAI;gBACP,KAAK,KAAK,GAAG,GAAG,SAAS,KAAK,GAAG,IAAI;gBACrC,OAAO,KAAK,KAAK,GAAG,WAAW,KAAK,KAAK,IAAI;gBAC7C,QAAQ,KAAK,MAAM,GAAG,WAAW,KAAK,MAAM,IAAI;YAClD;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiB,GAC1B;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,OACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,OAAO,0BAA0B;;QAEhD,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YAC1B,OAAO;gBAAE;YAAG;QACd;QAEA,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;YAAE,QAAQ;QAAI;IAE9C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiB,GAC1B;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Documents/Github/Hackathon_GL_2025/app/api/patients/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport { PrismaClient } from '@prisma/client'\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport async function GET(\r\n  request: Request,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    // Déstructurez les params directement dans les arguments de la fonction\r\n    const { id } = params\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: \"ID du patient manquant\" },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    const patient = await prisma.patient.findUnique({\r\n      where: { id }\r\n    })\r\n\r\n    if (!patient) {\r\n      return NextResponse.json(\r\n        { error: \"Patient non trouvé\" },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    return NextResponse.json(patient)\r\n    \r\n  } catch (error) {\r\n    console.error(\"Erreur récupération patient:\", error)\r\n    return NextResponse.json(\r\n      { error: \"Erreur serveur\" },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\n// Les corrections similaires pour PUT et DELETE\r\nexport async function PUT(\r\n  request: Request,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const { id } = params // Déstructuration directe\r\n    const data = await request.json()\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: \"ID du patient manquant\" },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    const updatedPatient = await prisma.patient.update({\r\n      where: { id },\r\n      data: {\r\n        ...data,\r\n        age: data.age ? parseInt(data.age) : undefined,\r\n        poids: data.poids ? parseFloat(data.poids) : undefined,\r\n        taille: data.taille ? parseFloat(data.taille) : undefined\r\n      }\r\n    })\r\n\r\n    return NextResponse.json(updatedPatient)\r\n    \r\n  } catch (error) {\r\n    console.error(\"Erreur mise à jour patient:\", error)\r\n    return NextResponse.json(\r\n      { error: \"Erreur serveur\" },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function DELETE(\r\n  request: Request,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const { id } = params // Déstructuration directe\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: \"ID du patient manquant\" },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    await prisma.patient.delete({\r\n      where: { id }\r\n    })\r\n\r\n    return new NextResponse(null, { status: 204 })\r\n    \r\n  } catch (error) {\r\n    console.error(\"Erreur suppression patient:\", error)\r\n    return NextResponse.json(\r\n      { error: \"Erreur serveur\" },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,wEAAwE;QACxE,MAAM,EAAE,EAAE,EAAE,GAAG;QAEf,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,MAAM,OAAO,OAAO,CAAC,UAAU,CAAC;YAC9C,OAAO;gBAAE;YAAG;QACd;QAEA,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiB,GAC1B;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,OAAO,0BAA0B;;QAChD,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,iBAAiB,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YACjD,OAAO;gBAAE;YAAG;YACZ,MAAM;gBACJ,GAAG,IAAI;gBACP,KAAK,KAAK,GAAG,GAAG,SAAS,KAAK,GAAG,IAAI;gBACrC,OAAO,KAAK,KAAK,GAAG,WAAW,KAAK,KAAK,IAAI;gBAC7C,QAAQ,KAAK,MAAM,GAAG,WAAW,KAAK,MAAM,IAAI;YAClD;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiB,GAC1B;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,OACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,OAAO,0BAA0B;;QAEhD,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YAC1B,OAAO;gBAAE;YAAG;QACd;QAEA,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;YAAE,QAAQ;QAAI;IAE9C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiB,GAC1B;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}