{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Documents/Github/Hackathon_GL_2025/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined;\r\n};\r\n\r\nconst prisma = globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\r\n\r\nexport default prisma;\r\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAEA,MAAM,kBAAkB;AAIxB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HP/Documents/Github/Hackathon_GL_2025/app/api/patients/route.ts"],"sourcesContent":["// app/api/patients/route.ts\r\nimport { NextResponse } from 'next/server';\r\nimport prisma from '@/lib/prisma';\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const patient = await req.json();\r\n\r\n    // Validation basique avant insertion\r\n    if (patient.age < 0) {\r\n      return NextResponse.json({ error: 'L\\'âge ne peut pas être négatif.' }, { status: 400 });\r\n    }\r\n\r\n    const newPatient = await prisma.patient.create({\r\n      data: {\r\n        name: patient.name,\r\n        age: patient.age,\r\n        diagnosis: patient.diagnosis,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(newPatient);\r\n  } catch (error) {\r\n    console.error('Erreur ajout patient:', error);\r\n    return NextResponse.json({ error: 'Erreur serveur' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    const patients = await prisma.patient.findMany({\r\n      take: 50,\r\n      orderBy: { createdAt: 'desc' },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        age: true,\r\n        diagnosis: true,\r\n         },\r\n    });\r\n    ;\r\n    return NextResponse.json(patients);\r\n  } catch (error) {\r\n    console.error('Erreur lors du chargement des patients:', error);\r\n    return NextResponse.json({ error: 'Erreur serveur' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,4BAA4B;;;;;AAC5B;AACA;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,UAAU,MAAM,IAAI,IAAI;QAE9B,qCAAqC;QACrC,IAAI,QAAQ,GAAG,GAAG,GAAG;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmC,GAAG;gBAAE,QAAQ;YAAI;QACxF;QAEA,MAAM,aAAa,MAAM,+GAAA,CAAA,UAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAC7C,MAAM;gBACJ,MAAM,QAAQ,IAAI;gBAClB,KAAK,QAAQ,GAAG;gBAChB,WAAW,QAAQ,SAAS;YAC9B;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;AACF;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,+GAAA,CAAA,UAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC7C,MAAM;YACN,SAAS;gBAAE,WAAW;YAAO;YAC7B,QAAQ;gBACN,IAAI;gBACJ,MAAM;gBACN,KAAK;gBACL,WAAW;YACV;QACL;;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2CAA2C;QACzD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;AACF","debugId":null}}]
}