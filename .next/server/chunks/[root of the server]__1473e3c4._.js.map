{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/macuser/Documents/GitHub/Hackathon_GL_2025/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\nimport { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nconst prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAEA,MAAM,kBAAkB;AAIxB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/macuser/Documents/GitHub/Hackathon_GL_2025/app/api/patients/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\n// Mettre à jour un patient\nexport async function PUT(req: Request, { params }: { params: { id: string } }) {\n  const { id } = params;  // Accès direct à params.id\n\n  try {\n    // Récupérer le corps de la requête\n    const body = await req.json();\n    const { name, age, diagnosis } = body;\n\n    // Vérification des données\n    if (!name || !age || !diagnosis) {\n      return NextResponse.json({ error: 'Données manquantes' }, { status: 400 });\n    }\n\n    // Vérification que l'âge est un entier\n    if (isNaN(age)) {\n      return NextResponse.json({ error: 'L\\'âge doit être un entier valide' }, { status: 400 });\n    }\n\n    // Mettre à jour le patient dans la base de données\n    const updatedPatient = await prisma.patient.update({\n      where: { id },\n      data: { name, age: parseInt(age, 10), diagnosis },  // Assurez-vous que age est un entier\n    });\n\n    return NextResponse.json(updatedPatient); // Renvoie le patient mis à jour\n  } catch (error) {\n    console.error('Erreur mise à jour patient:', error);\n    return NextResponse.json({ error: 'Erreur serveur' }, { status: 500 });\n  }\n}\n\n// Récupérer un patient par ID\nexport async function GET(req: Request, { params }: { params: { id: string } }) {\n  const { id } = params;  // Accès direct à params.id\n\n  try {\n    // Récupérer le patient de la base de données\n    const patient = await prisma.patient.findUnique({\n      where: {\n        id: id,\n      },\n    });\n\n    // Vérifier si le patient existe\n    if (!patient) {\n      return NextResponse.json({ message: \"Patient non trouvé\" }, { status: 404 });\n    }\n\n    return NextResponse.json(patient); // Renvoie les données du patient\n  } catch (error) {\n    console.error('Erreur récupération patient:', error);\n    return NextResponse.json({ error: 'Erreur serveur' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe,IAAI,GAAY,EAAE,EAAE,MAAM,EAA8B;IAC5E,MAAM,EAAE,EAAE,EAAE,GAAG,QAAS,2BAA2B;IAEnD,IAAI;QACF,mCAAmC;QACnC,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG;QAEjC,2BAA2B;QAC3B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC1E;QAEA,uCAAuC;QACvC,IAAI,MAAM,MAAM;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoC,GAAG;gBAAE,QAAQ;YAAI;QACzF;QAEA,mDAAmD;QACnD,MAAM,iBAAiB,MAAM,+GAAA,CAAA,UAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YACjD,OAAO;gBAAE;YAAG;YACZ,MAAM;gBAAE;gBAAM,KAAK,SAAS,KAAK;gBAAK;YAAU;QAClD;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,iBAAiB,gCAAgC;IAC5E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;AACF;AAGO,eAAe,IAAI,GAAY,EAAE,EAAE,MAAM,EAA8B;IAC5E,MAAM,EAAE,EAAE,EAAE,GAAG,QAAS,2BAA2B;IAEnD,IAAI;QACF,6CAA6C;QAC7C,MAAM,UAAU,MAAM,+GAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAC9C,OAAO;gBACL,IAAI;YACN;QACF;QAEA,gCAAgC;QAChC,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC5E;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,UAAU,iCAAiC;IACtE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;IACtE;AACF","debugId":null}}]
}