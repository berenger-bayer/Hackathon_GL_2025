{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/macuser/Documents/GitHub/Hackathon_GL_2025/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\nimport { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nconst prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\nexport default prisma;\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAEA,MAAM,kBAAkB;AAIxB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/macuser/Documents/GitHub/Hackathon_GL_2025/app/api/patients/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\n\nexport async function POST(req: Request) {\n  try {\n    const patient = await req.json();\n\n    // Validation des données\n    if (!patient.name || !patient.age || !patient.diagnosis) {\n      return NextResponse.json(\n        { error: 'Nom, âge et diagnostic sont obligatoires' },\n        { status: 400 }\n      );\n    }\n\n    // Validation du sexe\n    const validSexes = ['M', 'F', 'Autre', null];\n    if (patient.sexe && !validSexes.includes(patient.sexe)) {\n      return NextResponse.json(\n        { error: 'Le sexe doit être M, F, Autre ou null' },\n        { status: 400 }\n      );\n    }\n\n    // Création du patient\n    const newPatient = await prisma.patient.create({\n      data: {\n        name: patient.name,\n        age: parseInt(patient.age),\n        sexe: patient.sexe || null, // S'assure que le sexe est soit M/F/Autre soit null\n        diagnosis: patient.diagnosis,\n        poids: patient.poids ? parseFloat(patient.poids) : null,\n        taille: patient.taille ? parseFloat(patient.taille) : null,\n        traitement: patient.traitement || null,\n        numSecu: patient.numSecu || null,\n        medecin: patient.medecin || null,\n        ...(patient.rendezvous && { rendezvous: new Date(patient.rendezvous) }),\n        groupeSanguin: patient.groupeSanguin || null,\n        allergies: patient.allergies || null,\n        notes: patient.notes || null\n      }\n    });\n\n    return NextResponse.json(newPatient, { status: 201 });\n\n  } catch (error) {\n    console.error('Erreur ajout patient:', error);\n    return NextResponse.json(\n      { error: 'Erreur lors de la création du patient' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET() {\n  try {\n    const patients = await prisma.patient.findMany({\n      orderBy: { createdAt: 'desc' },\n      select: {\n        id: true,\n        name: true,\n        age: true,\n        sexe: true, // Inclure le sexe dans la réponse\n        diagnosis: true,\n        poids: true,\n        taille: true,\n        traitement: true,\n        numSecu: true,\n        medecin: true,\n        rendezvous: true,\n        groupeSanguin: true,\n        allergies: true,\n        notes: true,\n        createdAt: true\n      }\n    });\n    return NextResponse.json(patients);\n  } catch (error) {\n    console.error('Erreur lors du chargement des patients:', error);\n    return NextResponse.json(\n      { error: 'Erreur lors de la récupération des patients' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,UAAU,MAAM,IAAI,IAAI;QAE9B,yBAAyB;QACzB,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,SAAS,EAAE;YACvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2C,GACpD;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,MAAM,aAAa;YAAC;YAAK;YAAK;YAAS;SAAK;QAC5C,IAAI,QAAQ,IAAI,IAAI,CAAC,WAAW,QAAQ,CAAC,QAAQ,IAAI,GAAG;YACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwC,GACjD;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,MAAM,aAAa,MAAM,+GAAA,CAAA,UAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAC7C,MAAM;gBACJ,MAAM,QAAQ,IAAI;gBAClB,KAAK,SAAS,QAAQ,GAAG;gBACzB,MAAM,QAAQ,IAAI,IAAI;gBACtB,WAAW,QAAQ,SAAS;gBAC5B,OAAO,QAAQ,KAAK,GAAG,WAAW,QAAQ,KAAK,IAAI;gBACnD,QAAQ,QAAQ,MAAM,GAAG,WAAW,QAAQ,MAAM,IAAI;gBACtD,YAAY,QAAQ,UAAU,IAAI;gBAClC,SAAS,QAAQ,OAAO,IAAI;gBAC5B,SAAS,QAAQ,OAAO,IAAI;gBAC5B,GAAI,QAAQ,UAAU,IAAI;oBAAE,YAAY,IAAI,KAAK,QAAQ,UAAU;gBAAE,CAAC;gBACtE,eAAe,QAAQ,aAAa,IAAI;gBACxC,WAAW,QAAQ,SAAS,IAAI;gBAChC,OAAO,QAAQ,KAAK,IAAI;YAC1B;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,YAAY;YAAE,QAAQ;QAAI;IAErD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwC,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,+GAAA,CAAA,UAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC7C,SAAS;gBAAE,WAAW;YAAO;YAC7B,QAAQ;gBACN,IAAI;gBACJ,MAAM;gBACN,KAAK;gBACL,MAAM;gBACN,WAAW;gBACX,OAAO;gBACP,QAAQ;gBACR,YAAY;gBACZ,SAAS;gBACT,SAAS;gBACT,YAAY;gBACZ,eAAe;gBACf,WAAW;gBACX,OAAO;gBACP,WAAW;YACb;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2CAA2C;QACzD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA8C,GACvD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}